Notes

In the pages directory, all components have a <main> tag as their outermost wrapper element.
Features make use of the ContentLayout, which consists of a <main> tag and <nav>


Should ErrorMsg go outside of core app?
Might need to refactor use of ErrorMsg in App.jsx if that component is used elsewhere


Home/Welcome component issue.
In order to stick to current pattern, should be wrapped with
ContentLayout (and given a corresponding menu)
This seems like overkill. Consider redirecting to people automatically.


Might want to store current cohort on profile
this would make indexing cohorts much faster
for instructors to access full list, use isAdmin property of req.auth


Make sure to use preferredName consistently

State for a given feature is held in that feature's router


React Query Tips and Practices:
https://tkdodo.eu/blog/effective-react-query-keys


React Query Keys (great example of updating cache)
https://tkdodo.eu/blog/effective-react-query-keys

HOW TO HANDLER QUERY KEYS FROM THE TANSTACK BLOG
['todos', 'list', { filters: 'all' }]
['todos', 'list', { filters: 'done' }]
['todos', 'detail', 1]
['todos', 'detail', 2]


Optimistic Updates:
https://tanstack.com/query/v4/docs/react/guides/optimistic-updates


OLD MANAGER HOOK

import { useMutation, useQueryClient } from '@tanstack/react-query'
import * as deliverableService from '../services/deliverableService'

const serviceHandler = {
  create: deliverableService.createDeliverable,
  remove: deliverableService.deleteDeliverable,
  grade: deliverableService.gradeStudentDeliverable,
  submit: deliverableService.submitStudentDeliverable,
}

export const useDeliverablesManager = (cohortId) => {
  const queryClient = useQueryClient()

  const cacheHandler = {
    create: (payload, res) => {
      const queryKey = ['deliverables', cohortId]
      const updateState = (state) => [res, ...state]
      queryClient.setQueryData(queryKey, updateState)
    },
    remove: (payload, res) => {
      const { deliverableId } = payload
      const queryKey = ['deliverables', cohortId]
      const updateState = (state) => state.filter((d) => d._id !== deliverableId)
      queryClient.setQueryData(queryKey, updateState)
    },
    grade: (payload, res) => {
      const detailsQueryKey = ['studentDeliverable', res._id]
      queryClient.setQueryData(detailsQueryKey, { ...payload, ...res, profile: payload.profile })
    },
    submit: (payload, res) => {
      const listQueryKey = ['studentDeliverables', cohortId]
      const detailsQueryKey = ['studentDeliverable', res._id]

      const updateListState = (prev) => prev.map((sd) => {
        return sd._id === res._id ? { ...sd, ...res } : sd
      })

      queryClient.setQueryData(listQueryKey, updateListState)
      queryClient.setQueryData(detailsQueryKey, { ...payload, ...res })
    },
  }

  return useMutation({
    mutationFn: (action) => serviceHandler[action.type](action.payload),
    onSuccess: (res, action) => cacheHandler[action.type](action.payload, res),
    onError: (error) => console.log('Error!'),
  })
}